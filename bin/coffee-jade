#!/usr/bin/env node

/**
 * Module dependencies.
 */

var fs = require('fs')
  , program = require('commander')
  , path = require('path')
  , basename = path.basename
  , dirname = path.dirname
  , resolve = path.resolve
  , join = path.join
  , mkdirp = require('mkdirp')
  , jade = require('../');

// jade options

var options = {};

// options

program
  .version(jade.version)
  .usage('[options] [dir|file ...]')
  .option('-o, --obj <str>', 'javascript options object')
  .option('-O, --out <dir>', 'output the compiled html to <dir>')

program.on('--help', function(){
  console.log('  Examples:');
  console.log('');
  console.log('    # translate jade the templates dir');
  console.log('    $ jade templates');
  console.log('');
  console.log('    # create {foo,bar}.html');
  console.log('    $ jade {foo,bar}.jade');
  console.log('');
  console.log('    # foo, bar dirs rendering to /tmp');
  console.log('    $ jade foo bar --out /tmp ');
  console.log('');
});

program.parse(process.argv);

// options given, parse them

if (program.obj) options = eval('(' + program.obj + ')');

// left-over args are file paths

var files = program.args;

// compile files
if (files.length) {
  console.log();
  files.forEach(renderFile);
  process.on('exit', console.log);
} else {
  console.error('No files specified.');
}

/**
 * Process the given path, compiling the jade files found.
 * Always walk the subdirectories.
 */
function renderFile(path) {
  var re = /\.jade$/;
  fs.lstat(path, function(err, stat) {
    if (err) throw err;
    // Found jade file
    if (stat.isFile() && re.test(path)) {
      fs.readFile(path, 'utf8', function(err, str){
        if (err) throw err;
        var result = jade.parse(str, options);
        path = path.replace(re, '.coffee');
        if (program.out) path = join(program.out, basename(path));
        var dir = resolve(dirname(path));
        mkdirp(dir, 0755, function(err){
          if (err) throw err;
          fs.writeFile(path, result, function(err){
            if (err) throw err;
            console.log('  \033[90mrendered \033[36m%s\033[0m', path);
          });
        });
      });
    // Found directory
    } else if (stat.isDirectory()) {
      fs.readdir(path, function(err, files) {
        if (err) throw err;
        files.map(function(filename) {
          return path + '/' + filename;
        }).forEach(renderFile);
      });
    }
  });
}
